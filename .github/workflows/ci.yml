
name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: '[${{ matrix.test_type }}@${{ matrix.docker_image }}@deps:${{ matrix.dependencies }}]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_type:
          - "python"
        dependencies:
          - "conda-forge"
          - "system"
        docker_image:
          - "archlinux:base"
          - "fedora:37"
          - "fedora:38"
          - "fedora:39"
          - "ubuntu:22.04"
          - "ubuntu:23.04"
          - "ubuntu:23.10"
          - "debian:bookworm"
          - "debian:trixie"
          - "debian:sid"

    container:
      image: ${{ matrix.docker_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies and set library name [Debian-based]
        if: contains(matrix.docker_image, 'ubuntu') || contains(matrix.docker_image, 'debian')
        run: |
          apt update -y
          apt upgrade -y
          apt install -y python-is-python3 build-essential wget
          echo "PYTHON_EXECUTABLE=python3" >> $GITHUB_ENV

      - name: Install dependencies and set library name [Fedora-based]
        if: contains(matrix.docker_image, 'fedora')
        run: |
          dnf install -y python3 gcc wget
          echo "PYTHON_EXECUTABLE=python3" >> $GITHUB_ENV

      - name: Install dependencies and set library name [arch-based]
        if: contains(matrix.docker_image, 'archlinux') 
        run: |
          pacman --noconfirm -Sy gcc-libs python gcc wget
          echo "PYTHON_EXECUTABLE=python3" >> $GITHUB_ENV

      - name: Try to create segfault [Python/System]
        if: contains(matrix.test_type, 'python') && contains(matrix.dependencies, 'system')
        run: |
          gcc -shared -fPIC testso.c -o testso.so
          ${PYTHON_EXECUTABLE} -c "import ctypes; import os; ctypes._dlopen('./testso.so', os.RTLD_DEEPBIND)"

      - name: Try to create segfault [Python/conda-forge]
        if: contains(matrix.test_type, 'python') && contains(matrix.dependencies, 'conda-forge')
        run: |
          wget https://github.com/mamba-org/micromamba-releases/releases/download/1.5.1-0/micromamba-linux-64
          chmod +x ./micromamba-linux-64
          ./micromamba-linux-64 create -n testenv -c conda-forge compilers python
          ./micromamba-linux-64 run -n testenv gcc -shared -fPIC testso.c -o testso.so
          ./micromamba-linux-64 run -n testenv python -c "import ctypes; import os; ctypes._dlopen('./testso.so', os.RTLD_DEEPBIND)"
